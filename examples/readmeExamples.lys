(function labelExample ()
    (function main()
        (set x 0)
        (:start)

        (++ x)
        (if (< x 10)
            (
                (print "Less than 10: " x)
                (jump :start)
            )
        )
        (done)
    )

    (main)
)

(function variableExample()
    (define name "Global")
    (function main()
        (print "Started main")
        (print name)

        (set name "Set from scope")
        (print name)

        (define name "Created in scope")
        (print name)
        (print "End main")
    )

    (print name)
    (main)
    (print name)
)

(function defineSimpleExample ()
    (define name "Alan")
    (print "Hello " name) ; Outputs Hello Alan
)

(function defineScopeExample ()
    (define name "Global Name")
    (function main ()
        (print name) ; Outputs Global Name

        (define name "Local Name")
        (print name) ; Outputs Local Name
    )

    (print name) ; Outputs Global Name
    (main)
    (print name) ; Outputs Global Name
)

(function defineScopeMultiple ()
    (function multiply(x)
        (return (* x 2) (* x 3))
    )
    (function divide(x)
        (return (/ x 2) (/ x 3))
    )

    (define left right (multiply 5))
    (print "Multiply " left ", " right) ; Multiply 10, 15

    (define left right (divide 15))
    (print "Divide " left ", " right) ; Divide 7.5, 5
)

(function ifExample1 ()
    (function logCounter (counter)
        (if (< counter 10)
            (print "Counter less than 10")
            (print "Counter more than 10")
        )
    )

    (logCounter 5) ; Prints Counter less than 10
    (logCounter 20) ; Prints Counter more than 10
)

(function ifExample2 ()
    (define progress 0)
    (if (< progress 100)
        (
            (print "Still in progress")
            (print "Please wait...")
        )
        (
            (print "100% Progress")
            (print "All done")
        )
    )
)

(function ifExample3 ()
    (define progress 0)
    (define message (if (< progress 100) "Still in progress" "All done"))
    (print "Progress " progress "%: " message)
    ; Outputs Progress 0%: Still in progress

    (define progress 100)
    (define message (if (< progress 100) "Still in progress" "All done"))
    (print "Progress " progress "%: " message)
    ; Outputs Progress 100%: All done
)

(function unlessExample ()
    (define progress 0)
    (unless (< progress 100)
        (
            (print "100% Progress")
            (print "All done")
        )
        (
            (print "Still in progress")
            (print "Please wait...")
        )
    )
)

(function switchExample1 ()
    (define width 100)
    (define length 70)
    (switch
        ((< width 70) (print "Not wide enough"))
        ((< length 70) (print "Not long enough"))

        ; The true line is considered the else block
        (true (print "All good"))
    )
)

(function switchExample2 ()
    (function menu (timeOfDay)
        (print "For: " timeOfDay)
        (switch
            ((< timeOfDay "09:00")
                (print "Too early")
                (print "Come back later")
            )
            ((< timeOfDay "15:00")
                (print "Welcome")
                (print "Please choose a menu item")
            )
            ((< timeOfDay "19:00")
                (print "Good evening")
                (print "Please choose a menu item")
            )
            (true
                (print "Sorry we are closed")
            )
        )
        (print "Thank you")
    )

    (menu "08:00")
    (menu "12:00")
    (menu "16:00")
    (menu "20:00")
)

(function switchExample3 ()
    (function getProgress (progress)
        (return (switch
            ((< progress 5) "Not even started")
            ((< progress 25) "A little bit done")
            ((< progress 50) "Somewhat done")
            ((< progress 75) "It's getting there")
            ((< progress 100) "Almost done")
            ((== progress 100) "All done!")
            (true "Unknown progress")
        ))
    )

    (define i 0)
    (loop (<= i 5)
        (define progress (* i 20))
        (print "Progress " progress "%: " (getProgress progress))
        (++ i)
    )
)

(function switchExample4 ()
    (define i 0)
    (loop (<= i 5)
        (define progress (* i 20))
        (print "Progress " progress "%: " (switch
            ((< progress 5) "Not even started")
            ((< progress 25) "A little bit done")
            ((< progress 50) "Somewhat done")
            ((< progress 75) "It's getting there")
            ((< progress 100) "Almost done")
            ((== progress 100) "All done!")
            (true "Unknown progress")
        ))
        (++ i)
    )
)

(function functionExample ()
    (function clamp(input lower upper)
        (if (< input lower)
            (return lower)
        )
        (if (> input upper)
            (return upper)
        )
        (return input)
    )

    (print "Clamped 5 "  (clamp 5 -1 1))  ; Clamped 5 1
    (print "Clamped -5 " (clamp -5 -1 1)) ; Clamped -5 -1
    (print "Clamped 0 "  (clamp 0 -1 1))  ; Clamped 0 0
)

(function functionUnpackExample ()
    (function log (type ...inputs)
        (print "[" type "]: " ...inputs)
    )

    (function findMin(...values)
        (if (== values.length 0)
            (return null)
        )

        (define min values.0)
        (define i 1)
        (loop (< i values.length)
            (define curr (array.get values i))
            (if (> min curr)
                (set min curr)
            )
            (++ i)
        )

        (return min)
    )

    (log "Info" "Minimum Number: " (findMin 1 2 3))
    (log "Info" "Minimum Number: " (findMin 20 30 10))
    (log "Info" "Minimum Lexical: " (findMin "ABC" "DEF" "ZXC"))
    (log "Info" "Minimum Empty: " (findMin))
)

(function functionDefining ()
    (define main1 (function ()
        (print "Inside main1")
    ))

    (function main2 ()
        (print "Inside main2")
    )

    (main1)
    (main2)

    (print)

    (print "Main1: " (toString main1))
    (print "Main2: " (toString main2))
)

(function loopExample1 ()
    (define i 0)
    (loop (< i 4)
        (print i)
        (++ i)
    )
    (print "Done")
)

(function loopExample2 ()
    (define i 0)
    (:LoopStart)
    (if (< i 4)
        (
        (print i)
            (++ i)
            (jump :LoopStart)
        )
    )
    (:LoopEnd)
    (print "Done")
)

(function continueExample ()
    (define i 0)
    (loop (< i 6)
        (++ i)

        (if (<= i 3)
            (continue)
        )
        (print i)
    )
    (print "Done")
)

(function breakExample ()
    (define i 0)
    (loop (< i 6)
        (++ i)

        (print i)

        (if (> i 3)
            (break)
        )
    )
    (print "Done")
)

(function incExample ()
    (define i 0)
    (define j 0)
    (print i) ; 0
    (++ i)
    (print i " : " j) ; 1 : 0

    (++ i j)
    (print i " : " j) ; 2 : 0
    )

(function decExample ()
    (define i 0)
    (define j 0)
    (print i) ; 0
    (-- i)
    (print i " : " j) ; -1 : 0

    (-- i j)
    (print i " : " j) ; -2 : -1
)

; (function addUnpackNotWorkingExample ()
;     (define list (5 10))
;     (define x (+ ...list)) ; This will throw an error because the add operator expects two number inputs.
;     (print x)
; )

(function sumUnpackExample ()
    (define list [5 10])
    (define x (math.sum ...list))
    (print x) ; Outputs 15
)

; (sumUnpackExample)