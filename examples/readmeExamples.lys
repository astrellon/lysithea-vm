(function labelExample ()
    (function main()
        (set x 0)
        (:start)

        (inc x)
        (if (< x 10)
            (
                (print "Less than 10: " x)
                (jump :start)
            )
        )
        (done)
    )

    (main)
)

(function variableExample()
    (define name "Global")
    (function main()
        (print "Started main")
        (print name)

        (set name "Set from scope")
        (print name)

        (define name "Created in scope")
        (print name)
        (print "End main")
    )

    (print name)
    (main)
    (print name)
)

(function defineSimpleExample ()
    (define name "Alan")
    (print "Hello " name) ; Outputs Hello Alan
)

(function defineScopeExample ()
    (define name "Global Name")
    (function main ()
        (print name) ; Outputs Global Name

        (define name "Local Name")
        (print name) ; Outputs Local Name
    )

    (print name) ; Outputs Global Name
    (main)
    (print name) ; Outputs Global Name
)

(function defineScopeMultiple ()
    (function multiply(x)
        (return (* x 2) (* x 3))
    )
    (function divide(x)
        (return (/ x 2) (/ x 3))
    )

    (define left right (multiply 5))
    (print "Multiply " left ", " right) ; Multiply 10, 15

    (define left right (divide 15))
    (print "Divide " left ", " right) ; Divide 7.5, 5
)

(function ifExample1 ()
    (function logCounter ()
        (if (< counter 10)
            (print "Counter less than 10")
            (print "Counter more than 10")
        )
    )

    (define counter 0)
    (logCounter) ; Prints Counter less than 10

    (define counter 20)
    (logCounter) ; Prints Counter more than 10
)

(function ifExample2 ()
    (define progress 0)
    (if (< progress 100)
        (
            (print "Still in progress")
            (print "Please wait...")
        )
        (
            (print "100% Progress")
            (print "All done")
        )
    )
)

(function unlessExample ()
    (define progress 0)
    (unless (< progress 100)
        (
            (print "100% Progress")
            (print "All done")
        )
        (
            (print "Still in progress")
            (print "Please wait...")
        )
    )
)

(function functionExample ()
    (function clamp(input lower upper)
        (if (< input lower)
            (return lower)
        )
        (if (> input upper)
            (return upper)
        )
        (return input)
    )

    (print "Clamped 5 "  (clamp 5 -1 1))  ; Clamped 5 1
    (print "Clamped -5 " (clamp -5 -1 1)) ; Clamped -5 -1
    (print "Clamped 0 "  (clamp 0 -1 1))  ; Clamped 0 0
)

(function functionUnpackExample ()
    (function log (type ...inputs)
        (print "[" type "]: " ...inputs)
    )

    (function findMin(...values)
        (if (== values.length 0)
            (return null)
        )

        (define min values.0)
        (define i 1)
        (loop (< i values.length)
            (define curr (array.get values i))
            (if (> min curr)
                (set min curr)
            )
            (inc i)
        )

        (return min)
    )

    (log "Info" "Minimum Number: " (findMin 1 2 3))
    (log "Info" "Minimum Number: " (findMin 20 30 10))
    (log "Info" "Minimum Lexical: " (findMin "ABC" "DEF" "ZXC"))
    (log "Info" "Minimum Empty: " (findMin))
)

(function loopExample1 ()
    (define i 0)
    (loop (< i 4)
        (print i)
        (inc i)
    )
    (print "Done")
)

(function loopExample2 ()
    (define i 0)
    (:LoopStart)
    (if (< i 4)
        (
        (print i)
            (inc i)
            (jump :LoopStart)
        )
    )
    (:LoopEnd)
    (print "Done")
)

(function continueExample ()
    (define i 0)
    (loop (< i 6)
        (inc i)

        (if (<= i 3)
            (continue)
        )
        (print i)
    )
    (print "Done")
)

(function breakExample ()
    (define i 0)
    (loop (< i 6)
        (inc i)

        (print i)

        (if (> i 3)
            (break)
        )
    )
    (print "Done")
)

(function incExample ()
    (define i 0)
    (print i) ; 0
    (inc i)
    (print i) ; 1

    ; Equivalent to:
    (define i 0)
    (print i) ; 0
    (set i (+ i 1))
    (print 1) ; 0
)

(function decExample ()
    (define i 0)
    (print i) ; 0
    (dec i)
    (print i) ; -1

    ; Equivalent to:
    (define i 0)
    (print i) ; 0
    (set i (- i 1))
    (print i) ; -1
)